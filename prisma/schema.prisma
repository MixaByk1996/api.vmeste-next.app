// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  password        String
  photo_url       String // base64
  accountCategory TypeUser
  hasVerification Boolean         @default(false)
  balance         Float           @default(0)
  createAt        DateTime        @default(now())
  messages        Message[]
  createQuotes    Quote[]
  quotes          UsersOnQuotes[]
}

enum TypeUser {
  USER_ORDINARY
  USER_DELIVERY
  USER_ADMIN
  USER_MODERATOR
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  submane    String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  quote         Quote[]
  subcategories Subcategory[]
  requests      RequestApp[]
}

model Quote {
  id                 Int             @id @default(autoincrement())
  name               String
  city_name          String
  realization_period DateTime
  status             String
  tags               String
  description        String
  photo_url          String // base64
  country_name       String          @default("Россия")
  creater            User?           @relation(fields: [createrId], references: [id])
  createrId          Int?
  category           Category?       @relation(fields: [categoryId], references: [id])
  countStar          Int?
  categoryId         Int?
  min_amount         Float           @default(0.0)
  comission          Float           @default(0.0)
  createAt           DateTime        @default(now())
  messages           Message[]
  events             Event[]
  users              UsersOnQuotes[]
}

model Event {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  quote     Quote?   @relation(fields: [quoteId], references: [id])
  quoteId   Int?
}

model UsersOnQuotes {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  quote      Quote    @relation(fields: [quoteId], references: [id])
  quoteId    Int
  assignedAt DateTime @default(now())

  @@id([userId, quoteId])
}

model RequestApp {
  id            Int       @id @default(autoincrement())
  name          String
  countProducts Int
  city          String
  receiptPeriod DateTime
  country       String    @default("Россия")
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
}

enum TypeMessage {
  TYPE_TEXT
  TYPE_QUIZ
}

model Message {
  id        Int         @id @default(autoincrement())
  type      TypeMessage
  text      String?
  quiz      Quiz?       @relation(fields: [quizId], references: [id])
  quizId    Int?        @unique
  creater   User?       @relation(fields: [createrId], references: [id])
  createrId Int?
  quote     Quote?      @relation(references: [id], fields: [quoteId])
  quoteId   Int?
  createdAt DateTime    @default(now())
}

model Quiz {
  id      Int      @id @default(autoincrement())
  text    String
  answers Answer[]
  message Message?
}

model Answer {
  id     Int    @id @default(autoincrement())
  text   String
  quiz   Quiz?  @relation(fields: [quizId], references: [id])
  quizId Int?
}

// model City{
//   id Int @id
//   name String
//   applications Application[]
//   country Country? @relation(fields: [countryId], references: [id])
//   countryId Int?
// }
//
// model Country{
//   id Int @id
//   name String
//   cities City[]
// }
