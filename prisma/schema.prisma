// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @default(autoincrement()) @id
  name String
  email String @unique
  password String
  photo_url String //base64
  accountCategory String
  role String
  hasVerification Boolean @default(false)
  balance Decimal @default(0)
  createAt DateTime @default(now())
  createQuotes Quote[]
  quotes UsersOnQuotes[]
}

model Subcategory{
  id Int @default(autoincrement()) @id
  submane String
  category Category? @relation(fields: [categoryId],references: [id])
  categoryId Int?
}

model Category{
  id Int @default(autoincrement()) @id
  name String
  quote Quote[]
  subcategories Subcategory[]
}

model Quote{
  id Int @default(autoincrement()) @id
  name String
  city_name String
  realization_period DateTime
  status String
  tags String
  description String
  photo_url String //base64
  country_name String @default("Россия")
  creater User? @relation(fields: [createrId], references: [id])
  createrId Int?
  category Category? @relation(fields: [categoryId],references: [id])
  categoryId Int?
  min_amount Float @default(0.0)
  comission Float @default(0.0)
  createAt DateTime @default(now())
  events Event[]
  users UsersOnQuotes[]
}

model Event{
  id Int @default(autoincrement()) @id
  name String
  createdAt DateTime @default(now())
  quote Quote? @relation(fields: [quoteId], references: [id])
  quoteId Int?
}

model UsersOnQuotes{
    user User @relation(fields: [userId], references: [id])
    userId Int
    quote Quote @relation(fields: [quoteId], references: [id])
    quoteId Int
    assignedAt DateTime @default(now())
  @@id([userId,quoteId])
}

// model City{
//   id Int @id
//   name String
//   applications Application[]
//   country Country? @relation(fields: [countryId], references: [id])
//   countryId Int?
// }
//
// model Country{
//   id Int @id
//   name String
//   cities City[]
// }

